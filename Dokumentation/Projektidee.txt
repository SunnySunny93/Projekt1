===================================
=== Feedback Alpers, 2016-04-22 ===
===================================

Leider hatte ich beim letzten Mal einen wichtigen Hinweis vergessen: Es ist wichtig, dass Sie die Interaktion bzw. den Spielablauf schildern. In anderen Worten: Sie und viele Menschen wissen, wie Dame gespielt wird. Der Computer weiß das nicht und deshalb müssen Sie es auch detailliert notieren. Sonst kommen Sie später in die Bredouille, weil Sie keine genaue Vorgabe haben, was Sie umsetzen müssen. Und wenn Sie in einem Team tätig sind, kann es durchaus sein, dass Sie diese Dinge vorgeben und jemand anders Sie umsetzen muss. Wenn dann in der Konzeptionsphase etwas vergessen wurde, wird die Software Mängel haben.

(1.Aufgabe) Tragen Sie deshalb bitte die Regeln nach. Nehmen Sie sich dafür bitte Zeit, um sicherzustellen, dass Sie tatsächlich das Regelwerk vollständig notiert haben.

(2. Aufgabe) Da Ihr Spiel ja nur sehr beschränkte Möglichkeiten hat, haben Sie eine Sonderaufgabe: Nachdem Sie die Regeln für das klassische Dame notiert haben, denken Sie sich Erweiterungen aus. Seien Sie da nicht zu beschränkt: Wie wäre es mit einem veränderten Spielbrett? Wie wäre es mit einem Brett, bei dem die Anzahl Kanten zwar immer noch bei jedem Feld gleich ist, aber es sind nicht mehr vier, sondern drei oder fünf oder zehn oder ...? Wie wäre es mit mehr Spielern? Wie wäre es mit unterschiedlichen Spielsteinen? Was ist mit einem 3D- oder sogar 4D-Dame? usw. Vergessen Sie nicht: Es geht momentan um die Konzeption und später um das Umsetzen der Regeln, nicht um die Visualisierung bzw. das Design. Wenn die sich als zu schwer erweisen, ist das kein Problem; mir ist es wichtig, dass Sie sich auf das Umsetzen der Sturkturen und Regeln in ein Programm konzentrieren und nicht auf die Umsetzung des Designs.

Investieren Sie hier bitte wenigstens zwei Stunden, um sich weitere Möglichkeiten zu überlegen, arbeiten Sie dann die einzelnen Varianten aus.

(3. Aufgabe) Ergänzen Sie jetzt die Beschreibung der zusätzlichen nötigen strukturellen Elemente und ändern Sie bestehende Elemente bei Bedarf ab. Bitte teilen Sie die Elemente noch nicht in Ansichten auf. Das wird Teil der nächsten Aufgabe werden.

=====================================
=== Projektdokumtation 14.04.2016 ===
=====================================

Feedback erhalten von SvenMarderer: "Nichts zu ergänzen" --18:20--

TheCanadians: Projekt-A, Arler Erde
- strukt.html bearbeitet

Temm13: Projekt_1, Reaktionsspiel
- strukt.html bearbeitet
  - Spielfeld mit Formen (Löcher)
  - Bewegte Form muss ins Loch passen
  - Eingabe vom Spieler

Szai: Werterechner
--> keine strukt.html vorhanden

SvenMarderer: Projekt1, Betrayal at house on the hill
- strukt.html bearbeitet
  - Karten
  - Spielfeld
  - Würfel
  - 3 Kartenstapel
  
SusannaAlbrecht: GitProjekt, Monopoly
- strukt.html bearbeitet
  - Spielfeld: Tabelle
  
HTML-Datei strukt.html erstellt.

============================================
=== Projektidee SunnySunny93, 2016-04-05 ===
============================================

Dame (Brettspiel) Clone

Im Projekt soll das klassische Dame Brettspiel verwirklicht werden.

Das Dame Spiel soll von zwei Usern genutzt werden. Sollte der Zeitumfang es zulassen kann noch ein NPC programmiert werden.

Dazu müssen die Spielregeln umgesetzt werden und ein Spielfeld muss dargestellt werden.

Die Spieler können ihren Namen eintragen. 

Dann kann ausgegeben werden, wer gerade am Zug ist und später auch wer gewonnen hat.

Zusätzlich dazu können Daten von den beiden Spielern gesammelt und ausgegeben werden:
- Züge
- Spieldauer
- Siege
- Zeit pro Zug

Ich bin derzeit noch ohne Partner.

=== Feedback Alpers, 2016-04-06 ===

Bitte richten Sie noch das Verzeichnis "Dokumentation" wie in Kapitel 5 beschrieben ein und verschieben diese Datei dorthin.

Ansonsten sehr gut.

Wegen der Partnersuche machen Sie sich bitte keine Gedanken. Zu dem Thema werde ich bei der nächsten Veranstaltung noch etwas sagen, aber zum Teil wird das auch schon in der neuen Aufgabenstellung deutlich werden. Es läuft jedenfalls dieses Mal anders als im letzten Semester.

=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers